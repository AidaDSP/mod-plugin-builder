diff --git a/include/sys/random.h b/include/sys/random.h
deleted file mode 100644
index 6aa313d..0000000
--- a/include/sys/random.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#ifndef _SYS_RANDOM_H
-#include <stdlib/sys/random.h>
-
-# ifndef _ISOMAC
-
-extern ssize_t __getrandom (void *__buffer, size_t __length,
-                            unsigned int __flags) __wur;
-libc_hidden_proto (__getrandom)
-
-# endif /* !_ISOMAC */
-#endif
diff --git a/malloc/malloc.c b/malloc/malloc.c
index 1a1ac1d..e199acd 100644
--- a/malloc/malloc.c
+++ b/malloc/malloc.c
@@ -3159,8 +3159,6 @@ static uintptr_t tcache_key;
 static void
 tcache_key_initialize (void)
 {
-  if (__getrandom (&tcache_key, sizeof(tcache_key), GRND_NONBLOCK)
-      != sizeof (tcache_key))
     {
       tcache_key = random_bits ();
 #if __WORDSIZE == 64
diff --git a/posix/unistd.h b/posix/unistd.h
index 764d914..ce016ce 100644
--- a/posix/unistd.h
+++ b/posix/unistd.h
@@ -1192,13 +1192,6 @@ extern int pthread_atfork (void (*__prepare) (void),
 			   void (*__child) (void)) __THROW;
 #endif
 
-#ifdef __USE_MISC
-/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on
-   success or -1 on error.  */
-int getentropy (void *__buffer, size_t __length) __wur
-    __attr_access ((__write_only__, 1, 2));
-#endif
-
 #ifdef __USE_GNU
 /* Close all file descriptors in the range FD up to MAX_FD.  The flag FLAGS
    are define by the CLOSE_RANGE prefix.  This function behaves like close
diff --git a/stdlib/Makefile b/stdlib/Makefile
index 8236741..83540b9 100644
--- a/stdlib/Makefile
+++ b/stdlib/Makefile
@@ -46,7 +46,7 @@ routines	:=							      \
 	srand48 seed48 lcong48						      \
 	drand48_r erand48_r lrand48_r nrand48_r mrand48_r jrand48_r	      \
 	srand48_r seed48_r lcong48_r					      \
-	drand48-iter getrandom getentropy				      \
+	drand48-iter 							      \
 	strfromf strfromd strfroml					      \
 	strtol strtoul strtoll strtoull					      \
 	strtol_l strtoul_l strtoll_l strtoull_l				      \
@@ -94,7 +94,6 @@ tests := \
   tst-canon-bz26341 \
   tst-cxa_atexit \
   tst-environ \
-  tst-getrandom \
   tst-limits \
   tst-makecontext \
   tst-makecontext-align \
diff --git a/stdlib/Versions b/stdlib/Versions
index 5e9099a..7ed592f 100644
--- a/stdlib/Versions
+++ b/stdlib/Versions
@@ -117,7 +117,6 @@ libc {
   GLIBC_2.25 {
     # s*
     strfromd; strfromf; strfroml;
-    getrandom; getentropy;
   }
 %ifdef FLOAT128_VERSION
   FLOAT128_VERSION {
diff --git a/stdlib/getentropy.c b/stdlib/getentropy.c
deleted file mode 100644
index cca88a3..0000000
--- a/stdlib/getentropy.c
+++ /dev/null
@@ -1,31 +0,0 @@
-/* Stub for getentropy.
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/random.h>
-#include <errno.h>
-
-/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on
-   success and -1 on failure.  */
-int
-getentropy (void *buffer, size_t length)
-{
-  __set_errno (ENOSYS);
-  return -1;
-}
-
-stub_warning (getentropy)
diff --git a/stdlib/getrandom.c b/stdlib/getrandom.c
deleted file mode 100644
index b1dac01..0000000
--- a/stdlib/getrandom.c
+++ /dev/null
@@ -1,33 +0,0 @@
-/* Stub for getrandom.
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/random.h>
-#include <errno.h>
-
-/* Write up to LENGTH bytes of randomness starting at BUFFER.
-   Return the number of bytes written, or -1 on error.  */
-ssize_t
-__getrandom (void *buffer, size_t length, unsigned int flags)
-{
-  __set_errno (ENOSYS);
-  return -1;
-}
-stub_warning (getrandom)
-
-libc_hidden_def (__getrandom)
-weak_alias (__getrandom, getrandom)
diff --git a/stdlib/sys/random.h b/stdlib/sys/random.h
deleted file mode 100644
index ea5b98d..0000000
--- a/stdlib/sys/random.h
+++ /dev/null
@@ -1,43 +0,0 @@
-/* Interfaces for obtaining random bytes.
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#ifndef _SYS_RANDOM_H
-#define _SYS_RANDOM_H 1
-
-#include <features.h>
-#include <sys/types.h>
-
-/* Flags for use with getrandom.  */
-#define GRND_NONBLOCK 0x01
-#define GRND_RANDOM 0x02
-#define GRND_INSECURE 0x04
-
-__BEGIN_DECLS
-
-/* Write LENGTH bytes of randomness starting at BUFFER.  Return the
-   number of bytes written, or -1 on error.  */
-ssize_t getrandom (void *__buffer, size_t __length,
-                   unsigned int __flags) __wur;
-
-/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on
-   success or -1 on error.  */
-int getentropy (void *__buffer, size_t __length) __wur;
-
-__END_DECLS
-
-#endif /* _SYS_RANDOM_H */
diff --git a/stdlib/tst-getrandom.c b/stdlib/tst-getrandom.c
deleted file mode 100644
index 608fc47..0000000
--- a/stdlib/tst-getrandom.c
+++ /dev/null
@@ -1,245 +0,0 @@
-/* Tests for the getentropy, getrandom functions.
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <errno.h>
-#include <stdbool.h>
-#include <stdio.h>
-#include <string.h>
-#include <sys/random.h>
-
-/* Set to true if any errors are encountered.  */
-static bool errors;
-
-/* Test getrandom with a single buffer length.  NB: The passed-in
-   buffer must have room for four extra bytes after the specified
-   length, which are used to test that getrandom leaves those bytes
-   unchanged.  */
-static void
-test_length (char *buffer, size_t length, unsigned int flags)
-{
-  memset (buffer, 0, length);
-  strcpy (buffer + length, "123");
-  ssize_t ret = getrandom (buffer, length, flags);
-  if (ret < 0)
-    {
-      /* EAGAIN is an expected error with GRND_RANDOM and
-         GRND_NONBLOCK.  */
-      if ((flags & GRND_RANDOM)
-          && (flags & GRND_NONBLOCK)
-          && errno == EAGAIN)
-        return;
-      printf ("error: getrandom (%zu, 0x%x): %m\n", length, flags);
-      errors = true;
-      return;
-    }
- if (ret != length)
-    {
-      if (flags & GRND_RANDOM)
-        {
-          if (ret == 0 || ret > length)
-            {
-              printf ("error: getrandom (%zu, 0x%x) returned %zd\n",
-                      length, flags, ret);
-              errors = true;
-            }
-        }
-      else
-        {
-          printf ("error: getrandom (%zu, 0x%x) returned %zd\n",
-                  length, flags, ret);
-          errors = true;
-        }
-    }
-  if (length >= 7)
-    {
-      /* One spurious test failure in 2**56 is sufficiently
-         unlikely.  */
-      int non_null = 0;
-      for (int i = 0; i < length; ++i)
-        non_null += buffer[i] != 0;
-      if (non_null == 0)
-        {
-          printf ("error: getrandom (%zu, 0x%x) returned all-zero bytes\n",
-                  length, flags);
-          errors = true;
-        }
-    }
-  if (memcmp (buffer + length, "123", 4) != 0)
-    {
-      printf ("error: getrandom (%zu, 0x%x) wrote spurious bytes\n",
-              length, flags);
-      errors = true;
-    }
-}
-
-/* Call getrandom repeatedly to fill the buffer.  */
-static bool
-getrandom_full (char *buffer, size_t length, unsigned int flags)
-{
-  char *end = buffer + length;
-  while (buffer < end)
-    {
-      ssize_t ret = getrandom (buffer, end - buffer, flags);
-      if (ret < 0)
-        {
-          printf ("error: getrandom (%zu, 0x%x): %m\n", length, flags);
-          errors = true;
-          return false;
-        }
-      buffer += ret;
-    }
-
-  return true;
-}
-
-static void
-test_flags (unsigned int flags)
-{
-  /* Test various lengths, but only for !GRND_RANDOM, to conserve
-     entropy.  */
-  {
-    enum { max_length = 300 };
-    char buffer[max_length + 4];
-    if (flags & GRND_RANDOM)
-      test_length (buffer, 0, flags);
-    else
-      {
-        for (int length = 0; length <= 9; ++length)
-          test_length (buffer, length, flags);
-        test_length (buffer, 16, flags);
-        test_length (buffer, max_length, flags);
-      }
-  }
-
-  /* Test that getrandom returns different data.  */
-  if (!(flags & GRND_NONBLOCK))
-    {
-      char buffer1[8];
-      memset (buffer1, 0, sizeof (buffer1));
-
-      char buffer2[8];
-      memset (buffer2, 0, sizeof (buffer2));
-
-      if (getrandom_full (buffer1, sizeof (buffer1), flags)
-          && getrandom_full (buffer2, sizeof (buffer2), flags))
-        {
-          /* The probability that these two 8-byte buffers are equal
-             is very small (assuming that two subsequent calls to
-             getrandom result are independent, uniformly distributed
-             random variables).  */
-          if (memcmp (buffer1, buffer2, sizeof (buffer1)) == 0)
-            {
-              printf ("error: getrandom returns constant value\n");
-              errors = true;
-            }
-        }
-    }
-}
-
-static void
-test_getentropy (void)
-{
-  char buf[16];
-  memset (buf, '@', sizeof (buf));
-  if (getentropy (buf, 0) != 0)
-    {
-      printf ("error: getentropy zero length: %m\n");
-      errors = true;
-      return;
-    }
-  for (size_t i = 0; i < sizeof (buf); ++i)
-    if (buf[i] != '@')
-      {
-        printf ("error: getentropy modified zero-length buffer\n");
-        errors = true;
-        return;
-      }
-
-  if (getentropy (buf, sizeof (buf)) != 0)
-    {
-      printf ("error: getentropy buf: %m\n");
-      errors = true;
-      return;
-    }
-
-  char buf2[256];
-  _Static_assert (sizeof (buf) < sizeof (buf2), "buf and buf2 compatible");
-  memset (buf2, '@', sizeof (buf2));
-  if (getentropy (buf2, sizeof (buf)) != 0)
-    {
-      printf ("error: getentropy buf2: %m\n");
-      errors = true;
-      return;
-    }
-
-  /* The probability that these two buffers are equal is very
-     small. */
-  if (memcmp (buf, buf2, sizeof (buf) == 0))
-    {
-      printf ("error: getentropy appears to return constant bytes\n");
-      errors = true;
-      return;
-    }
-
-  for (size_t i = sizeof (buf); i < sizeof (buf2); ++i)
-    if (buf2[i] != '@')
-      {
-        printf ("error: getentropy wrote beyond the end of the buffer\n");
-        errors = true;
-        return;
-      }
-
-  char buf3[257];
-  if (getentropy (buf3, sizeof (buf3)) == 0)
-    {
-      printf ("error: getentropy successful for 257 byte buffer\n");
-      errors = true;
-      return;
-    }
-  if (errno != EIO)
-    {
-      printf ("error: getentropy wrong error for 257 byte buffer: %m\n");
-      errors = true;
-      return;
-    }
-}
-
-static int
-do_test (void)
-{
-  /* Check if getrandom is not supported by this system.  */
-  if (getrandom (NULL, 0, 0) == -1 && errno == ENOSYS)
-    return 77;
-
-  for (int use_random = 0; use_random < 2; ++use_random)
-    for (int use_nonblock = 0; use_nonblock < 2; ++use_nonblock)
-      {
-        unsigned int flags = 0;
-        if (use_random)
-          flags |= GRND_RANDOM;
-        if (use_nonblock)
-          flags |= GRND_NONBLOCK;
-        test_flags (flags);
-      }
-
-  test_getentropy ();
-
-  return errors;
-}
-
-#include <support/test-driver.c>
diff --git a/sysdeps/mach/hurd/getentropy.c b/sysdeps/mach/hurd/getentropy.c
deleted file mode 100644
index faf1c64..0000000
--- a/sysdeps/mach/hurd/getentropy.c
+++ /dev/null
@@ -1,64 +0,0 @@
-/* Implementation of getentropy based on getrandom.
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/random.h>
-#include <assert.h>
-#include <errno.h>
-#include <unistd.h>
-
-/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on
-   success and -1 on failure.  */
-int
-getentropy (void *buffer, size_t length)
-{
-  /* The interface is documented to return EIO for buffer lengths
-     longer than 256 bytes.  */
-  if (length > 256)
-    {
-      __set_errno (EIO);
-      return -1;
-    }
-
-  /* Try to fill the buffer completely.  Even with the 256 byte limit
-     above, we might still receive an EINTR error (when blocking
-     during boot).  */
-  void *end = buffer + length;
-  while (buffer < end)
-    {
-      /* NB: No cancellation point.  */
-      ssize_t bytes = __getrandom (buffer, end - buffer, 0);
-      if (bytes < 0)
-        {
-          if (errno == EINTR)
-            /* Try again if interrupted by a signal.  */
-            continue;
-          else
-            return -1;
-        }
-      if (bytes == 0)
-        {
-          /* No more bytes available.  This should not happen under
-             normal circumstances.  */
-          __set_errno (EIO);
-          return -1;
-        }
-      /* Try again in case of a short read.  */
-      buffer += bytes;
-    }
-  return 0;
-}
diff --git a/sysdeps/mach/hurd/getrandom.c b/sysdeps/mach/hurd/getrandom.c
deleted file mode 100644
index ad2d3ba..0000000
--- a/sysdeps/mach/hurd/getrandom.c
+++ /dev/null
@@ -1,63 +0,0 @@
-/* Hurdish implementation of getrandom
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/random.h>
-#include <fcntl.h>
-#include <unistd.h>
-#include <not-cancel.h>
-
-extern char *__trivfs_server_name __attribute__((weak));
-
-/* Write up to LENGTH bytes of randomness starting at BUFFER.
-   Return the number of bytes written, or -1 on error.  */
-ssize_t
-__getrandom (void *buffer, size_t length, unsigned int flags)
-{
-  const char *random_source = "/dev/urandom";
-  int open_flags = O_RDONLY | O_CLOEXEC;
-  size_t amount_read;
-  int fd;
-
-  if (&__trivfs_server_name && __trivfs_server_name
-      && __trivfs_server_name[0] == 'r'
-      && __trivfs_server_name[1] == 'a'
-      && __trivfs_server_name[2] == 'n'
-      && __trivfs_server_name[3] == 'd'
-      && __trivfs_server_name[4] == 'o'
-      && __trivfs_server_name[5] == 'm'
-      && __trivfs_server_name[6] == '\0')
-    /* We are random, don't try to read ourselves!  */
-    return length;
-
-  if (flags & GRND_RANDOM)
-    random_source = "/dev/random";
-
-  if (flags & GRND_NONBLOCK)
-    open_flags |= O_NONBLOCK;
-
-  fd = __open_nocancel(random_source, open_flags);
-  if (fd == -1)
-    return -1;
-
-  amount_read = __read_nocancel(fd, buffer, length);
-  __close_nocancel_nostatus(fd);
-  return amount_read;
-}
-
-libc_hidden_def (__getrandom)
-weak_alias (__getrandom, getrandom)
diff --git a/sysdeps/mach/hurd/i386/libc.abilist b/sysdeps/mach/hurd/i386/libc.abilist
index 4dc87e9..f715fea 100644
--- a/sysdeps/mach/hurd/i386/libc.abilist
+++ b/sysdeps/mach/hurd/i386/libc.abilist
@@ -2016,8 +2016,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 gnu_dev_major F
 GLIBC_2.25 gnu_dev_makedev F
 GLIBC_2.25 gnu_dev_minor F
diff --git a/sysdeps/posix/tempname.c b/sysdeps/posix/tempname.c
index ebd2a43..c22806c 100644
--- a/sysdeps/posix/tempname.c
+++ b/sysdeps/posix/tempname.c
@@ -64,7 +64,6 @@
 # define __open open
 # define __lstat64_time64(file, buf) lstat (file, buf)
 # define __stat64(file, buf) stat (file, buf)
-# define __getrandom getrandom
 # define __clock_gettime64 clock_gettime
 # define __timespec64 timespec
 #endif
@@ -78,12 +77,8 @@ typedef uint_fast64_t random_value;
 #define BASE_62_POWER (62LL * 62 * 62 * 62 * 62 * 62 * 62 * 62 * 62 * 62)
 
 static random_value
-random_bits (random_value var, bool use_getrandom)
+random_bits (random_value var)
 {
-  random_value r;
-  /* Without GRND_NONBLOCK it can be blocked for minutes on some systems.  */
-  if (use_getrandom && __getrandom (&r, sizeof r, GRND_NONBLOCK) == sizeof r)
-    return r;
 #if _LIBC || (defined CLOCK_MONOTONIC && HAVE_CLOCK_GETTIME)
   /* Add entropy if getrandom did not work.  */
   struct __timespec64 tv;
@@ -270,13 +265,6 @@ try_tempname_len (char *tmpl, int suffixlen, void *args,
   /* How many random base-62 digits can currently be extracted from V.  */
   int vdigits = 0;
 
-  /* Whether to consume entropy when acquiring random bits.  On the
-     first try it's worth the entropy cost with __GT_NOCREATE, which
-     is inherently insecure and can use the entropy to make it a bit
-     less secure.  On the (rare) second and later attempts it might
-     help against DoS attacks.  */
-  bool use_getrandom = tryfunc == try_nocreate;
-
   /* Least unfair value for V.  If V is less than this, V can generate
      BASE_62_DIGITS digits fairly.  Otherwise it might be biased.  */
   random_value const unfair_min
@@ -301,8 +289,7 @@ try_tempname_len (char *tmpl, int suffixlen, void *args,
             {
               do
                 {
-                  v = random_bits (v, use_getrandom);
-                  use_getrandom = true;
+                  v = random_bits (v);
                 }
               while (unfair_min <= v);
 
diff --git a/sysdeps/unix/sysv/linux/aarch64/libc.abilist b/sysdeps/unix/sysv/linux/aarch64/libc.abilist
index 1b63d9e..1f5a09b 100644
--- a/sysdeps/unix/sysv/linux/aarch64/libc.abilist
+++ b/sysdeps/unix/sysv/linux/aarch64/libc.abilist
@@ -2293,8 +2293,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/alpha/libc.abilist b/sysdeps/unix/sysv/linux/alpha/libc.abilist
index e7e4cf7..2380eaa 100644
--- a/sysdeps/unix/sysv/linux/alpha/libc.abilist
+++ b/sysdeps/unix/sysv/linux/alpha/libc.abilist
@@ -2164,8 +2164,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/arm/be/libc.abilist b/sysdeps/unix/sysv/linux/arm/be/libc.abilist
index db7039c..5ab0bb8 100644
--- a/sysdeps/unix/sysv/linux/arm/be/libc.abilist
+++ b/sysdeps/unix/sysv/linux/arm/be/libc.abilist
@@ -88,8 +88,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/arm/le/libc.abilist b/sysdeps/unix/sysv/linux/arm/le/libc.abilist
index d2add4f..367e398 100644
--- a/sysdeps/unix/sysv/linux/arm/le/libc.abilist
+++ b/sysdeps/unix/sysv/linux/arm/le/libc.abilist
@@ -88,8 +88,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/getentropy.c b/sysdeps/unix/sysv/linux/getentropy.c
deleted file mode 100644
index c716d60..0000000
--- a/sysdeps/unix/sysv/linux/getentropy.c
+++ /dev/null
@@ -1,65 +0,0 @@
-/* Implementation of getentropy based on the getrandom system call.
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/random.h>
-#include <assert.h>
-#include <errno.h>
-#include <unistd.h>
-#include <sysdep.h>
-
-/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on
-   success and -1 on failure.  */
-int
-getentropy (void *buffer, size_t length)
-{
-  /* The interface is documented to return EIO for buffer lengths
-     longer than 256 bytes.  */
-  if (length > 256)
-    {
-      __set_errno (EIO);
-      return -1;
-    }
-
-  /* Try to fill the buffer completely.  Even with the 256 byte limit
-     above, we might still receive an EINTR error (when blocking
-     during boot).  */
-  void *end = buffer + length;
-  while (buffer < end)
-    {
-      /* NB: No cancellation point.  */
-      ssize_t bytes = INLINE_SYSCALL_CALL (getrandom, buffer, end - buffer, 0);
-      if (bytes < 0)
-        {
-          if (errno == EINTR)
-            /* Try again if interrupted by a signal.  */
-            continue;
-          else
-            return -1;
-        }
-      if (bytes == 0)
-        {
-          /* No more bytes available.  This should not happen under
-             normal circumstances.  */
-          __set_errno (EIO);
-          return -1;
-        }
-      /* Try again in case of a short read.  */
-      buffer += bytes;
-    }
-  return 0;
-}
diff --git a/sysdeps/unix/sysv/linux/getrandom.c b/sysdeps/unix/sysv/linux/getrandom.c
deleted file mode 100644
index 1acf680..0000000
--- a/sysdeps/unix/sysv/linux/getrandom.c
+++ /dev/null
@@ -1,32 +0,0 @@
-/* Implementation of the getrandom system call.
-   Copyright (C) 2016-2022 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/random.h>
-#include <errno.h>
-#include <unistd.h>
-#include <sysdep-cancel.h>
-
-/* Write up to LENGTH bytes of randomness starting at BUFFER.
-   Return the number of bytes written, or -1 on error.  */
-ssize_t
-__getrandom (void *buffer, size_t length, unsigned int flags)
-{
-  return SYSCALL_CANCEL (getrandom, buffer, length, flags);
-}
-libc_hidden_def (__getrandom)
-weak_alias (__getrandom, getrandom)
diff --git a/sysdeps/unix/sysv/linux/hppa/libc.abilist b/sysdeps/unix/sysv/linux/hppa/libc.abilist
index 3df39bb..625648c 100644
--- a/sysdeps/unix/sysv/linux/hppa/libc.abilist
+++ b/sysdeps/unix/sysv/linux/hppa/libc.abilist
@@ -2009,8 +2009,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/i386/libc.abilist b/sysdeps/unix/sysv/linux/i386/libc.abilist
index c4da358..13ee3de 100644
--- a/sysdeps/unix/sysv/linux/i386/libc.abilist
+++ b/sysdeps/unix/sysv/linux/i386/libc.abilist
@@ -2177,8 +2177,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/ia64/libc.abilist b/sysdeps/unix/sysv/linux/ia64/libc.abilist
index 241bac7..12b1f3a 100644
--- a/sysdeps/unix/sysv/linux/ia64/libc.abilist
+++ b/sysdeps/unix/sysv/linux/ia64/libc.abilist
@@ -2032,8 +2032,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/m68k/coldfire/libc.abilist b/sysdeps/unix/sysv/linux/m68k/coldfire/libc.abilist
index 78bf372..fff859b 100644
--- a/sysdeps/unix/sysv/linux/m68k/coldfire/libc.abilist
+++ b/sysdeps/unix/sysv/linux/m68k/coldfire/libc.abilist
@@ -89,8 +89,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/m68k/m680x0/libc.abilist b/sysdeps/unix/sysv/linux/m68k/m680x0/libc.abilist
index 00df5c9..92ece09 100644
--- a/sysdeps/unix/sysv/linux/m68k/m680x0/libc.abilist
+++ b/sysdeps/unix/sysv/linux/m68k/m680x0/libc.abilist
@@ -2133,8 +2133,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/microblaze/be/libc.abilist b/sysdeps/unix/sysv/linux/microblaze/be/libc.abilist
index e811856..6e6188c 100644
--- a/sysdeps/unix/sysv/linux/microblaze/be/libc.abilist
+++ b/sysdeps/unix/sysv/linux/microblaze/be/libc.abilist
@@ -2293,8 +2293,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/microblaze/le/libc.abilist b/sysdeps/unix/sysv/linux/microblaze/le/libc.abilist
index c0d2373..a2addb6 100644
--- a/sysdeps/unix/sysv/linux/microblaze/le/libc.abilist
+++ b/sysdeps/unix/sysv/linux/microblaze/le/libc.abilist
@@ -2293,8 +2293,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/mips/mips32/fpu/libc.abilist b/sysdeps/unix/sysv/linux/mips/mips32/fpu/libc.abilist
index 2d0fd04..3b83a08 100644
--- a/sysdeps/unix/sysv/linux/mips/mips32/fpu/libc.abilist
+++ b/sysdeps/unix/sysv/linux/mips/mips32/fpu/libc.abilist
@@ -2103,8 +2103,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/mips/mips32/nofpu/libc.abilist b/sysdeps/unix/sysv/linux/mips/mips32/nofpu/libc.abilist
index e39ccfb..1dfe2d1 100644
--- a/sysdeps/unix/sysv/linux/mips/mips32/nofpu/libc.abilist
+++ b/sysdeps/unix/sysv/linux/mips/mips32/nofpu/libc.abilist
@@ -2101,8 +2101,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/mips/mips64/n32/libc.abilist b/sysdeps/unix/sysv/linux/mips/mips64/n32/libc.abilist
index 1e900f8..024235e 100644
--- a/sysdeps/unix/sysv/linux/mips/mips64/n32/libc.abilist
+++ b/sysdeps/unix/sysv/linux/mips/mips64/n32/libc.abilist
@@ -2099,8 +2099,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/mips/mips64/n64/libc.abilist b/sysdeps/unix/sysv/linux/mips/mips64/n64/libc.abilist
index 9145ba7..d3e94b1 100644
--- a/sysdeps/unix/sysv/linux/mips/mips64/n64/libc.abilist
+++ b/sysdeps/unix/sysv/linux/mips/mips64/n64/libc.abilist
@@ -2095,8 +2095,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/nios2/libc.abilist b/sysdeps/unix/sysv/linux/nios2/libc.abilist
index e95d60d..709dfd5 100644
--- a/sysdeps/unix/sysv/linux/nios2/libc.abilist
+++ b/sysdeps/unix/sysv/linux/nios2/libc.abilist
@@ -2335,8 +2335,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/powerpc/powerpc32/fpu/libc.abilist b/sysdeps/unix/sysv/linux/powerpc/powerpc32/fpu/libc.abilist
index 3820b9f..de09fe2 100644
--- a/sysdeps/unix/sysv/linux/powerpc/powerpc32/fpu/libc.abilist
+++ b/sysdeps/unix/sysv/linux/powerpc/powerpc32/fpu/libc.abilist
@@ -2137,8 +2137,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/libc.abilist b/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/libc.abilist
index 464dc27..a63391d 100644
--- a/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/libc.abilist
+++ b/sysdeps/unix/sysv/linux/powerpc/powerpc32/nofpu/libc.abilist
@@ -2141,8 +2141,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/powerpc/powerpc64/be/libc.abilist b/sysdeps/unix/sysv/linux/powerpc/powerpc64/be/libc.abilist
index 2f7e587..1e813d9 100644
--- a/sysdeps/unix/sysv/linux/powerpc/powerpc64/be/libc.abilist
+++ b/sysdeps/unix/sysv/linux/powerpc/powerpc64/be/libc.abilist
@@ -89,8 +89,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/powerpc/powerpc64/le/libc.abilist b/sysdeps/unix/sysv/linux/powerpc/powerpc64/le/libc.abilist
index 4f3043d..7c4f68d 100644
--- a/sysdeps/unix/sysv/linux/powerpc/powerpc64/le/libc.abilist
+++ b/sysdeps/unix/sysv/linux/powerpc/powerpc64/le/libc.abilist
@@ -2380,8 +2380,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/s390/s390-32/libc.abilist b/sysdeps/unix/sysv/linux/s390/s390-32/libc.abilist
index 7c5ee8d..6801d66 100644
--- a/sysdeps/unix/sysv/linux/s390/s390-32/libc.abilist
+++ b/sysdeps/unix/sysv/linux/s390/s390-32/libc.abilist
@@ -2136,8 +2136,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/s390/s390-64/libc.abilist b/sysdeps/unix/sysv/linux/s390/s390-64/libc.abilist
index 50de0b4..7e1cfd1 100644
--- a/sysdeps/unix/sysv/linux/s390/s390-64/libc.abilist
+++ b/sysdeps/unix/sysv/linux/s390/s390-64/libc.abilist
@@ -2021,8 +2021,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/sh/be/libc.abilist b/sysdeps/unix/sysv/linux/sh/be/libc.abilist
index 66fba01..ef5246a 100644
--- a/sysdeps/unix/sysv/linux/sh/be/libc.abilist
+++ b/sysdeps/unix/sysv/linux/sh/be/libc.abilist
@@ -2013,8 +2013,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/sh/le/libc.abilist b/sysdeps/unix/sysv/linux/sh/le/libc.abilist
index 38703f8..18bf963 100644
--- a/sysdeps/unix/sysv/linux/sh/le/libc.abilist
+++ b/sysdeps/unix/sysv/linux/sh/le/libc.abilist
@@ -2013,8 +2013,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/sparc/sparc32/libc.abilist b/sysdeps/unix/sysv/linux/sparc/sparc32/libc.abilist
index 6df55eb..54bc4b1 100644
--- a/sysdeps/unix/sysv/linux/sparc/sparc32/libc.abilist
+++ b/sysdeps/unix/sysv/linux/sparc/sparc32/libc.abilist
@@ -2130,8 +2130,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/sparc/sparc64/libc.abilist b/sysdeps/unix/sysv/linux/sparc/sparc64/libc.abilist
index b90569d..bc8380f 100644
--- a/sysdeps/unix/sysv/linux/sparc/sparc64/libc.abilist
+++ b/sysdeps/unix/sysv/linux/sparc/sparc64/libc.abilist
@@ -2057,8 +2057,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/syscall-names.list b/sysdeps/unix/sysv/linux/syscall-names.list
index 6421806..2cbbb91 100644
--- a/sysdeps/unix/sysv/linux/syscall-names.list
+++ b/sysdeps/unix/sysv/linux/syscall-names.list
@@ -177,7 +177,6 @@ getpid
 getpmsg
 getppid
 getpriority
-getrandom
 getresgid
 getresgid32
 getresuid
diff --git a/sysdeps/unix/sysv/linux/x86_64/64/libc.abilist b/sysdeps/unix/sysv/linux/x86_64/64/libc.abilist
index e88b0f1..f9156c4 100644
--- a/sysdeps/unix/sysv/linux/x86_64/64/libc.abilist
+++ b/sysdeps/unix/sysv/linux/x86_64/64/libc.abilist
@@ -2007,8 +2007,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/unix/sysv/linux/x86_64/x32/libc.abilist b/sysdeps/unix/sysv/linux/x86_64/x32/libc.abilist
index e075527..770a3cd 100644
--- a/sysdeps/unix/sysv/linux/x86_64/x32/libc.abilist
+++ b/sysdeps/unix/sysv/linux/x86_64/x32/libc.abilist
@@ -2303,8 +2303,6 @@ GLIBC_2.23 fts64_set F
 GLIBC_2.24 quick_exit F
 GLIBC_2.25 __explicit_bzero_chk F
 GLIBC_2.25 explicit_bzero F
-GLIBC_2.25 getentropy F
-GLIBC_2.25 getrandom F
 GLIBC_2.25 strfromd F
 GLIBC_2.25 strfromf F
 GLIBC_2.25 strfroml F
diff --git a/sysdeps/posix/tempname.c b/sysdeps/posix/tempname.c
index ebd2a43..2203932 100644
--- a/sysdeps/posix/tempname.c
+++ b/sysdeps/posix/tempname.c
@@ -50,7 +50,6 @@
 #include <fcntl.h>
 #include <stdalign.h>
 #include <stdint.h>
-#include <sys/random.h>
 #include <sys/stat.h>
 #include <time.h>
 
diff --git a/malloc/malloc.c b/malloc/malloc.c
index 1a1ac1d..a8c292d 100644
--- a/malloc/malloc.c
+++ b/malloc/malloc.c
@@ -253,7 +253,6 @@
 
 /* For tcache double-free check.  */
 #include <random-bits.h>
-#include <sys/random.h>
 
 /*
   Debugging:
diff --git a/stdlib/Makefile b/stdlib/Makefile
index 8236741..a5ddff2 100644
--- a/stdlib/Makefile
+++ b/stdlib/Makefile
@@ -28,7 +28,7 @@ headers	:= stdlib.h bits/stdlib.h bits/stdlib-ldbl.h bits/stdlib-float.h      \
 	   errno.h sys/errno.h bits/errno.h bits/types/error_t.h	      \
 	   ucontext.h sys/ucontext.h bits/indirect-return.h		      \
 	   alloca.h fmtmsg.h						      \
-	   bits/stdlib-bsearch.h sys/random.h bits/stdint-intn.h	      \
+	   bits/stdlib-bsearch.h bits/stdint-intn.h			      \
 	   bits/stdint-uintn.h bits/time64.h				      \
 
 routines	:=							      \
