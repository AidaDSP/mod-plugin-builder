diff --git a/linux/JackLinuxFutex.cpp b/linux/JackLinuxFutex.cpp
index 2d74e77..c5f4d09 100644
--- a/linux/JackLinuxFutex.cpp
+++ b/linux/JackLinuxFutex.cpp
@@ -57,13 +57,13 @@ bool JackLinuxFutex::Signal()
         return true;
     }
 
-    if (! __sync_bool_compare_and_swap(fFutex, 0, 1))
+    if (! __sync_bool_compare_and_swap(&fFutex->futex, 0, 1))
     {
         // already unlocked, do not wake futex
-        if (! fPrivate) return true;
+        if (! fFutex->internal) return true;
     }
 
-    ::syscall(__NR_futex, fFutex, fPrivate ? FUTEX_WAKE_PRIVATE : FUTEX_WAKE, 1, NULL, NULL, 0);
+    ::syscall(__NR_futex, fFutex, fFutex->internal ? FUTEX_WAKE_PRIVATE : FUTEX_WAKE, 1, NULL, NULL, 0);
     return true;
 }
 
@@ -79,12 +79,18 @@ bool JackLinuxFutex::Wait()
         return false;
     }
 
+    if (fFutex->needsChange)
+    {
+        fFutex->needsChange = false;
+        fFutex->internal = !fFutex->internal;
+    }
+
     for (;;)
     {
-        if (__sync_bool_compare_and_swap(fFutex, 1, 0))
+        if (__sync_bool_compare_and_swap(&fFutex->futex, 1, 0))
             return true;
 
-        if (::syscall(__NR_futex, fFutex, fPrivate ? FUTEX_WAIT_PRIVATE : FUTEX_WAIT, 0, NULL, NULL, 0) != 0 && errno != EWOULDBLOCK)
+        if (::syscall(__NR_futex, fFutex, fFutex->internal ? FUTEX_WAIT_PRIVATE : FUTEX_WAIT, 0, NULL, NULL, 0) != 0 && errno != EWOULDBLOCK)
             return false;
     }
 }
@@ -96,6 +102,12 @@ bool JackLinuxFutex::TimedWait(long usec)
         return false;
      }
 
+    if (fFutex->needsChange)
+    {
+        fFutex->needsChange = false;
+        fFutex->internal = !fFutex->internal;
+    }
+
     const uint secs  =  usec / 1000000;
     const int  nsecs = (usec % 1000000) * 1000;
 
@@ -103,10 +115,10 @@ bool JackLinuxFutex::TimedWait(long usec)
 
     for (;;)
     {
-        if (__sync_bool_compare_and_swap(fFutex, 1, 0))
+        if (__sync_bool_compare_and_swap(&fFutex->futex, 1, 0))
             return true;
 
-        if (::syscall(__NR_futex, fFutex, fPrivate ? FUTEX_WAIT_PRIVATE : FUTEX_WAIT, 0, &timeout, NULL, 0) != 0 && errno != EWOULDBLOCK)
+        if (::syscall(__NR_futex, fFutex, fFutex->internal ? FUTEX_WAIT_PRIVATE : FUTEX_WAIT, 0, &timeout, NULL, 0) != 0 && errno != EWOULDBLOCK)
             return false;
     }
 }
@@ -122,9 +134,9 @@ bool JackLinuxFutex::Allocate(const char* name, const char* server_name, int val
         return false;
     }
 
-    ftruncate(fSharedMem, sizeof(int));
+    ftruncate(fSharedMem, sizeof(FutexData));
 
-    if ((fFutex = (int*)mmap(NULL, sizeof(int), PROT_READ|PROT_WRITE, MAP_SHARED|MAP_LOCKED, fSharedMem, 0)) == NULL) {
+    if ((fFutex = (FutexData*)mmap(NULL, sizeof(FutexData), PROT_READ|PROT_WRITE, MAP_SHARED|MAP_LOCKED, fSharedMem, 0)) == NULL) {
         jack_error("Allocate: can't check in named futex name = %s err = %s", fName, strerror(errno));
         close(fSharedMem);
         fSharedMem = -1;
@@ -132,8 +144,13 @@ bool JackLinuxFutex::Allocate(const char* name, const char* server_name, int val
         return false;
     }
 
-    *fFutex = value;
     fPrivate = internal;
+
+    fFutex->futex = value;
+    fFutex->internal = internal;
+    fFutex->wasInternal = internal;
+    fFutex->needsChange = false;
+    fFutex->externalCount = 0;
     return true;
 }
 
@@ -154,13 +171,24 @@ bool JackLinuxFutex::Connect(const char* name, const char* server_name)
         return false;
     }
 
-    if ((fFutex = (int*)mmap(NULL, sizeof(int), PROT_READ|PROT_WRITE, MAP_SHARED|MAP_LOCKED, fSharedMem, 0)) == NULL) {
+    if ((fFutex = (FutexData*)mmap(NULL, sizeof(FutexData), PROT_READ|PROT_WRITE, MAP_SHARED|MAP_LOCKED, fSharedMem, 0)) == NULL) {
         jack_error("Connect: can't connect named futex name = %s err = %s", fName, strerror(errno));
         close(fSharedMem);
         fSharedMem = -1;
         return false;
     }
 
+    if (! fPrivate && fFutex->wasInternal)
+    {
+        const char* externalSync = getenv("JACK_INTERNAL_CLIENT_SYNC");
+
+        if (externalSync != NULL && strstr(fName, externalSync) != NULL && ++fFutex->externalCount == 1)
+        {
+            jack_error("Note: client %s running as external client temporarily", fName);
+            fFutex->needsChange = true;
+        }
+    }
+
     return true;
 }
 
@@ -180,7 +208,18 @@ bool JackLinuxFutex::Disconnect()
         return true;
     }
 
-    munmap(fFutex, sizeof(int));
+    if (! fPrivate && fFutex->wasInternal)
+    {
+        const char* externalSync = getenv("JACK_INTERNAL_CLIENT_SYNC");
+
+        if (externalSync != NULL && strstr(fName, externalSync) != NULL && --fFutex->externalCount == 0)
+        {
+            jack_error("Note: client %s now running as internal client again", fName);
+            fFutex->needsChange = true;
+        }
+    }
+
+    munmap(fFutex, sizeof(FutexData));
     fFutex = NULL;
 
     close(fSharedMem);
@@ -195,7 +234,7 @@ void JackLinuxFutex::Destroy()
         return;
     }
 
-    munmap(fFutex, sizeof(int));
+    munmap(fFutex, sizeof(FutexData));
     fFutex = NULL;
 
     close(fSharedMem);
diff --git a/linux/JackLinuxFutex.h b/linux/JackLinuxFutex.h
index bcda93a..d549f8c 100644
--- a/linux/JackLinuxFutex.h
+++ b/linux/JackLinuxFutex.h
@@ -42,9 +42,16 @@ class SERVER_EXPORT JackLinuxFutex : public detail::JackSynchro
 {
 
     private:
+        struct FutexData {
+            int futex;         // futex, needs to be 1st member
+            bool internal;     // current internal state
+            bool wasInternal;  // initial internal state, only changes in allocate
+            bool needsChange;  // change state on next wait call
+            int externalCount; // how many external clients have connected
+        };
 
         int fSharedMem;
-        int* fFutex;
+        FutexData* fFutex;
         bool fPrivate;
 
     protected:
