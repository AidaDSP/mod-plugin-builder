diff --git a/linux/JackLinuxTime.c b/linux/JackLinuxTime.c
index a5ece76..43d5456 100644
--- a/linux/JackLinuxTime.c
+++ b/linux/JackLinuxTime.c
@@ -143,7 +143,7 @@ static jack_time_t jack_get_microseconds_from_system (void)
 	jack_time_t jackTime;
 	struct timespec time;
 
-	clock_gettime(CLOCK_MONOTONIC, &time);
+	clock_gettime(CLOCK_REALTIME, &time);
 	jackTime = (jack_time_t) time.tv_sec * 1e6 +
 		(jack_time_t) time.tv_nsec / 1e3;
 	return jackTime;
diff --git a/posix/JackPosixProcessSync.cpp b/posix/JackPosixProcessSync.cpp
index 04c8785..43190a6 100644
--- a/posix/JackPosixProcessSync.cpp
+++ b/posix/JackPosixProcessSync.cpp
@@ -108,67 +108,55 @@ bool JackPosixProcessSync::TimedWait(long usec)
     ThrowIf(!pthread_equal(pthread_self(), fOwner), JackException("JackPosixProcessSync::TimedWait: a thread has to have locked a mutex before it can wait"));
     fOwner = 0;
 
-    struct timeval T0, T1;
-    timespec time;
-    struct timeval now;
     int res;
+    timespec now;
+    clock_gettime(CLOCK_REALTIME, &now);
 
-    jack_log("JackPosixProcessSync::TimedWait time out = %ld", usec);
-    gettimeofday(&T0, 0);
-
-    gettimeofday(&now, 0);
-    unsigned int next_date_usec = now.tv_usec + usec;
-    time.tv_sec = now.tv_sec + (next_date_usec / 1000000);
-    time.tv_nsec = (next_date_usec % 1000000) * 1000;
+    timespec delta = { usec / 1000000, (usec % 1000000) * 1000 };
+    timespec end   = { now.tv_sec + delta.tv_sec, now.tv_nsec + delta.tv_nsec };
+    if (end.tv_nsec >= 1000000000L) {
+        ++end.tv_sec;
+        end.tv_nsec -= 1000000000L;
+    }
 
-    res = pthread_cond_timedwait(&fCond, &fMutex, &time);
+    res = pthread_cond_timedwait(&fCond, &fMutex, &end);
     if (res != 0) {
         jack_error("JackPosixProcessSync::TimedWait error usec = %ld err = %s", usec, strerror(res));
     } else {
         fOwner = pthread_self();
     }
 
-    gettimeofday(&T1, 0);
-    jack_log("JackPosixProcessSync::TimedWait finished delta = %5.1lf",
-             (1e6 * T1.tv_sec - 1e6 * T0.tv_sec + T1.tv_usec - T0.tv_usec));
-
     return (res == 0);
 }
 
 // TO DO : check thread consistency?
 bool JackPosixProcessSync::LockedTimedWait(long usec)
 {
-    struct timeval T0, T1;
-    timespec time;
-    struct timeval now;
-    int res1, res2;
-
-    res1 = pthread_mutex_lock(&fMutex);
+    int res1 = pthread_mutex_lock(&fMutex);
     if (res1 != 0) {
         jack_error("JackPosixProcessSync::LockedTimedWait error err = %s", usec, strerror(res1));
     }
 
-    jack_log("JackPosixProcessSync::TimedWait time out = %ld", usec);
-    gettimeofday(&T0, 0);
+    timespec now;
+    clock_gettime(CLOCK_REALTIME, &now);
 
-    gettimeofday(&now, 0);
-    unsigned int next_date_usec = now.tv_usec + usec;
-    time.tv_sec = now.tv_sec + (next_date_usec / 1000000);
-    time.tv_nsec = (next_date_usec % 1000000) * 1000;
-    res2 = pthread_cond_timedwait(&fCond, &fMutex, &time);
+    timespec delta = { usec / 1000000, (usec % 1000000) * 1000 };
+    timespec end   = { now.tv_sec + delta.tv_sec, now.tv_nsec + delta.tv_nsec };
+    if (end.tv_nsec >= 1000000000L) {
+        ++end.tv_sec;
+        end.tv_nsec -= 1000000000L;
+    }
+
+    int res2 = pthread_cond_timedwait(&fCond, &fMutex, &end);
     if (res2 != 0) {
         jack_error("JackPosixProcessSync::LockedTimedWait error usec = %ld err = %s", usec, strerror(res2));
     }
 
-    gettimeofday(&T1, 0);
     res1 = pthread_mutex_unlock(&fMutex);
     if (res1 != 0) {
         jack_error("JackPosixProcessSync::LockedTimedWait error err = %s", usec, strerror(res1));
     }
 
-    jack_log("JackPosixProcessSync::TimedWait finished delta = %5.1lf",
-             (1e6 * T1.tv_sec - 1e6 * T0.tv_sec + T1.tv_usec - T0.tv_usec));
-
     return (res2 == 0);
 }
 
diff --git a/posix/JackPosixSemaphore.cpp b/posix/JackPosixSemaphore.cpp
index 6eccbe5..3f1d665 100644
--- a/posix/JackPosixSemaphore.cpp
+++ b/posix/JackPosixSemaphore.cpp
@@ -115,24 +115,24 @@ bool JackPosixSemaphore::Wait()
 
 bool JackPosixSemaphore::TimedWait(long usec)
 {
-	int res;
-	struct timeval now;
-	timespec time;
-
 	if (!fSemaphore) {
 		jack_error("JackPosixSemaphore::TimedWait name = %s already deallocated!!", fName);
 		return false;
 	}
-	gettimeofday(&now, 0);
-	time.tv_sec = now.tv_sec + usec / 1000000;
-    long tv_usec = (now.tv_usec + (usec % 1000000));
-    time.tv_sec += tv_usec / 1000000;
-    time.tv_nsec = (tv_usec % 1000000) * 1000;
 
-    while ((res = sem_timedwait(fSemaphore, &time)) < 0) {
+    int res;
+    timespec now;
+    clock_gettime(CLOCK_REALTIME, &now);
+
+    timespec delta = { usec / 1000000, (usec % 1000000) * 1000 };
+    timespec end   = { now.tv_sec + delta.tv_sec, now.tv_nsec + delta.tv_nsec };
+    if (end.tv_nsec >= 1000000000L) {
+        ++end.tv_sec;
+        end.tv_nsec -= 1000000000L;
+    }
+
+    while ((res = sem_timedwait(fSemaphore, &end)) < 0) {
         jack_error("JackPosixSemaphore::TimedWait err = %s", strerror(errno));
-        jack_log("JackPosixSemaphore::TimedWait now : %ld %ld ", now.tv_sec, now.tv_usec);
-        jack_log("JackPosixSemaphore::TimedWait next : %ld %ld ", time.tv_sec, time.tv_nsec/1000);
         if (errno != EINTR) {
             break;
         }
