diff --git a/plugins/wolf-shaper/Common/Utils/Mathf.hpp b/plugins/wolf-shaper/Common/Utils/Mathf.hpp
index 176f15a..0133b5f 100644
--- a/plugins/wolf-shaper/Common/Utils/Mathf.hpp
+++ b/plugins/wolf-shaper/Common/Utils/Mathf.hpp
@@ -1,7 +1,7 @@
 #ifndef WOLF_MATHF_DEFINED_H
 #define WOLF_MATHF_DEFINED_H
 
-#include "Geometry.hpp"
+#include "DistrhoUtils.hpp"
 
 #include <cmath>
 #include <type_traits>
@@ -51,44 +51,6 @@ inline int modulo(int a, int b)
     return result >= 0 ? result : result + b;
 }
 
-template <typename T, typename U>
-bool pointInCircle(DGL_NAMESPACE::Circle<T> circle, DGL_NAMESPACE::Point<U> point)
-{
-    //source: https://stackoverflow.com/questions/481144/equation-for-testing-if-a-point-is-inside-a-circle
-    const float radius = circle.getSize();
-
-    const T x = point.getX();
-    const T xo = circle.getX();
-
-    const T dx = std::abs(x - xo);
-
-    if (dx > radius)
-        return false;
-
-    const T y = point.getY();
-    const T yo = circle.getY();
-
-    const T dy = std::abs(y - yo);
-
-    if (dy > radius)
-        return false;
-
-    if (dx + dy <= radius)
-        return true;
-
-    return dx * dx + dy * dy <= radius * radius;
-}
-
-template <typename T, typename U,
-          typename = typename std::enable_if<std::is_arithmetic<U>::value, U>::type>
-DGL_NAMESPACE::Point<T> flipY(const DGL_NAMESPACE::Point<T> point, const U height)
-{
-    const T x = point.getX();
-    const T y = height - point.getY();
-
-    return DGL_NAMESPACE::Point<T>(x, y);
-}
-
 float logScale(const float value, const float min, const float max);
 
 float invLogScale(const float value, const float min, const float max);
@@ -108,4 +70,4 @@ double parseHexFloat(char const* ptr, char **endPointer);
 
 END_NAMESPACE_DISTRHO
 
-#endif
\ No newline at end of file
+#endif
diff --git a/plugins/wolf-shaper/Common/Utils/src/Mathf.cpp b/plugins/wolf-shaper/Common/Utils/src/Mathf.cpp
index aba1a7c..d898b72 100644
--- a/plugins/wolf-shaper/Common/Utils/src/Mathf.cpp
+++ b/plugins/wolf-shaper/Common/Utils/src/Mathf.cpp
@@ -1,27 +1,9 @@
-#include "Geometry.hpp"
+#include "Mathf.hpp"
 
 START_NAMESPACE_DISTRHO
 
 namespace wolf
 {
-template <typename T,
-          typename = typename std::enable_if<std::is_arithmetic<T>::value, T>::type>
-T clamp(const T &value, const T &min, const T &max)
-{
-    return std::max(min, std::min(value, max));
-}
-
-template <typename T>
-T mirror(const T &value, const T &max)
-{
-    return max - value;
-}
-
-template <typename T>
-T mirror(const T &value, const T &min, const T &max)
-{
-    return max - value + min;
-}
 
 float normalize(const float &value, const float &max)
 {
