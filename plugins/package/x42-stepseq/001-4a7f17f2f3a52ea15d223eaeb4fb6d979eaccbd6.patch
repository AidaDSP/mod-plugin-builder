From 4a7f17f2f3a52ea15d223eaeb4fb6d979eaccbd6 Mon Sep 17 00:00:00 2001
From: Robin Gareus <robin@gareus.org>
Date: Wed, 24 May 2017 18:18:15 +0200
Subject: [PATCH] Fix midi-message ordering

In case of re-trigger off/on it may happen than that the event-sequence
becomes { {time:0  event A}, {time:1 event B}, {time:0 event C} }
This throws off some synths unless the host sorts events.
---
 src/stepseq.c | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/src/stepseq.c b/src/stepseq.c
index c04cac2..2b0ba5b 100644
--- a/src/stepseq.c
+++ b/src/stepseq.c
@@ -610,6 +610,30 @@ run (LV2_Handle instance, uint32_t n_samples)
 	self->stme = stme + remain;
 	self->rolling = true;
 
+	/* crude sort Atom sequence by event-time
+	 * (in drum-mode or with re-trigger events may
+	 * not be sequential in time)
+	 */
+	LV2_ATOM_SEQUENCE_FOREACH (self->midiout, ev1) {
+		LV2_ATOM_SEQUENCE_FOREACH (self->midiout, ev2) {
+			if (ev2 <= ev1) {
+				continue;
+			}
+			if (ev1->time.frames > ev2->time.frames) {
+				// swap events
+				assert (ev1->body.size == ev2->body.size);
+				assert (ev1->body.size == 3);
+				int64_t tme = ev1->time.frames;
+				uint8_t body[3];
+				memcpy (body, (const uint8_t*)(ev1 + 1), 3);
+				memcpy ((uint8_t*)(ev1 + 1), (const uint8_t*)(ev2 + 1), 3);
+				ev1->time.frames = ev2->time.frames;
+				memcpy ((uint8_t*)(ev2 + 1), body, 3);
+				ev2->time.frames = tme;
+			}
+		}
+	}
+
 	*self->p_step = 1 + (self->step % N_STEPS);
 	if (self->host_info) {
 		/* keep track of host position.. */
