diff --git a/trunk/src/LV2/faust-generated/gx_vibrochump.cc b/trunk/src/LV2/faust-generated/gx_vibrochump.cc
index 8fc1410..67430b3 100644
--- a/trunk/src/LV2/faust-generated/gx_vibrochump.cc
+++ b/trunk/src/LV2/faust-generated/gx_vibrochump.cc
@@ -14,20 +14,20 @@ private:
 	FAUSTFLOAT 	fslider0;
 	FAUSTFLOAT	*fslider0_;
 	double 	fConst2;
-	int 	iRec9[2];
 	int 	iRec8[2];
+	int 	iRec7[2];
 	double 	fConst3;
-	double 	fRec12[2];
 	double 	fRec11[2];
 	double 	fRec10[2];
+	double 	fRec9[2];
 	FAUSTFLOAT 	fcheckbox0;
 	FAUSTFLOAT	*fcheckbox0_;
 	FAUSTFLOAT 	fslider1;
 	FAUSTFLOAT	*fslider1_;
-	double 	fRec7[2];
+	double 	fRec6[2];
 	FAUSTFLOAT 	fslider2;
 	FAUSTFLOAT	*fslider2_;
-	double 	fRec14[2];
+	double 	fRec13[2];
 	double 	fConst4;
 	double 	fConst5;
 	double 	fConst6;
@@ -48,35 +48,38 @@ private:
 	double 	fRec23[2];
 	double 	fRec22[3];
 	double 	fConst16;
-	double 	fVec2[2];
-	double 	fRec28[2];
-	double 	fRec27[3];
-	double 	fVec3[2];
 	double 	fConst17;
 	double 	fConst18;
 	double 	fConst19;
+	FAUSTFLOAT 	fslider3;
+	FAUSTFLOAT	*fslider3_;
+	double 	fRec24[2];
 	double 	fConst20;
-	double 	fRec29[2];
-	double 	fRec26[2];
 	double 	fConst21;
 	double 	fConst22;
 	double 	fConst23;
 	double 	fConst24;
 	double 	fConst25;
-	double 	fRec25[2];
 	double 	fConst26;
+	double 	fVec2[2];
+	double 	fRec29[2];
+	double 	fRec28[3];
+	double 	fVec3[2];
 	double 	fConst27;
 	double 	fConst28;
 	double 	fConst29;
-	double 	fRec24[2];
-	FAUSTFLOAT 	fslider3;
-	FAUSTFLOAT	*fslider3_;
 	double 	fConst30;
+	double 	fRec30[2];
+	double 	fRec27[2];
 	double 	fConst31;
 	double 	fConst32;
 	double 	fConst33;
 	double 	fConst34;
-	double 	fRec30[2];
+	double 	fConst35;
+	double 	fRec26[2];
+	double 	fRec25[3];
+	double 	fConst36;
+	double 	fConst37;
 	FAUSTFLOAT 	fslider4;
 	FAUSTFLOAT	*fslider4_;
 	double 	fRec31[2];
@@ -86,30 +89,30 @@ private:
 	double 	fRec18[2];
 	double 	fRec17[3];
 	double 	fVec6[2];
-	double 	fConst35;
-	double 	fConst36;
-	double 	fConst37;
 	double 	fConst38;
+	double 	fConst39;
+	double 	fConst40;
+	double 	fConst41;
 	double 	fRec32[2];
 	double 	fRec16[2];
 	double 	fRec15[2];
+	double 	fRec14[2];
 	double 	fVec7[2];
-	double 	fRec13[2];
+	double 	fRec12[2];
 	double 	fVec8[2];
-	double 	fRec6[2];
-	double 	fRec5[3];
+	double 	fRec5[2];
+	double 	fRec4[3];
 	double 	fVec9[2];
-	double 	fConst39;
-	double 	fConst40;
-	double 	fConst41;
 	double 	fConst42;
+	double 	fConst43;
+	double 	fConst44;
+	double 	fConst45;
 	double 	fRec33[2];
-	double 	fRec4[2];
 	double 	fRec3[2];
-	double 	fConst43;
 	double 	fRec2[2];
-	double 	fConst44;
+	double 	fConst46;
 	double 	fRec1[2];
+	double 	fConst47;
 	double 	fRec0[2];
 	void connect(uint32_t port,void* data);
 	void clear_state_f();
@@ -148,27 +151,27 @@ Dsp::~Dsp() {
 inline void Dsp::clear_state_f()
 {
 	for (int i=0; i<2; i++) iVec0[i] = 0;
-	for (int i=0; i<2; i++) iRec9[i] = 0;
 	for (int i=0; i<2; i++) iRec8[i] = 0;
-	for (int i=0; i<2; i++) fRec12[i] = 0;
+	for (int i=0; i<2; i++) iRec7[i] = 0;
 	for (int i=0; i<2; i++) fRec11[i] = 0;
 	for (int i=0; i<2; i++) fRec10[i] = 0;
-	for (int i=0; i<2; i++) fRec7[i] = 0;
-	for (int i=0; i<2; i++) fRec14[i] = 0;
+	for (int i=0; i<2; i++) fRec9[i] = 0;
+	for (int i=0; i<2; i++) fRec6[i] = 0;
+	for (int i=0; i<2; i++) fRec13[i] = 0;
 	for (int i=0; i<2; i++) fVec1[i] = 0;
 	for (int i=0; i<2; i++) fRec21[i] = 0;
 	for (int i=0; i<3; i++) fRec20[i] = 0;
 	for (int i=0; i<2; i++) fRec23[i] = 0;
 	for (int i=0; i<3; i++) fRec22[i] = 0;
+	for (int i=0; i<2; i++) fRec24[i] = 0;
 	for (int i=0; i<2; i++) fVec2[i] = 0;
-	for (int i=0; i<2; i++) fRec28[i] = 0;
-	for (int i=0; i<3; i++) fRec27[i] = 0;
-	for (int i=0; i<2; i++) fVec3[i] = 0;
 	for (int i=0; i<2; i++) fRec29[i] = 0;
-	for (int i=0; i<2; i++) fRec26[i] = 0;
-	for (int i=0; i<2; i++) fRec25[i] = 0;
-	for (int i=0; i<2; i++) fRec24[i] = 0;
+	for (int i=0; i<3; i++) fRec28[i] = 0;
+	for (int i=0; i<2; i++) fVec3[i] = 0;
 	for (int i=0; i<2; i++) fRec30[i] = 0;
+	for (int i=0; i<2; i++) fRec27[i] = 0;
+	for (int i=0; i<2; i++) fRec26[i] = 0;
+	for (int i=0; i<3; i++) fRec25[i] = 0;
 	for (int i=0; i<2; i++) fRec31[i] = 0;
 	for (int i=0; i<2; i++) fVec4[i] = 0;
 	for (int i=0; i<2; i++) fRec19[i] = 0;
@@ -179,14 +182,14 @@ inline void Dsp::clear_state_f()
 	for (int i=0; i<2; i++) fRec32[i] = 0;
 	for (int i=0; i<2; i++) fRec16[i] = 0;
 	for (int i=0; i<2; i++) fRec15[i] = 0;
+	for (int i=0; i<2; i++) fRec14[i] = 0;
 	for (int i=0; i<2; i++) fVec7[i] = 0;
-	for (int i=0; i<2; i++) fRec13[i] = 0;
+	for (int i=0; i<2; i++) fRec12[i] = 0;
 	for (int i=0; i<2; i++) fVec8[i] = 0;
-	for (int i=0; i<2; i++) fRec6[i] = 0;
-	for (int i=0; i<3; i++) fRec5[i] = 0;
+	for (int i=0; i<2; i++) fRec5[i] = 0;
+	for (int i=0; i<3; i++) fRec4[i] = 0;
 	for (int i=0; i<2; i++) fVec9[i] = 0;
 	for (int i=0; i<2; i++) fRec33[i] = 0;
-	for (int i=0; i<2; i++) fRec4[i] = 0;
 	for (int i=0; i<2; i++) fRec3[i] = 0;
 	for (int i=0; i<2; i++) fRec2[i] = 0;
 	for (int i=0; i<2; i++) fRec1[i] = 0;
@@ -210,7 +213,7 @@ inline void Dsp::init(uint32_t samplingFreq)
 	fConst6 = (2 * (1 - fConst5));
 	fConst7 = (1.0 / fConst4);
 	fConst8 = (1 + ((fConst7 - 1.0000000000000004) / fConst4));
-	fConst9 = (1 + ((1.0000000000000004 + fConst7) / fConst4));
+	fConst9 = (1 + ((fConst7 + 1.0000000000000004) / fConst4));
 	fConst10 = (1.0 / fConst9);
 	fConst11 = (0 - fConst7);
 	fConst12 = (1 + fConst7);
@@ -218,34 +221,37 @@ inline void Dsp::init(uint32_t samplingFreq)
 	fConst14 = (0 - ((1 - fConst7) / fConst12));
 	fConst15 = (2 * (0 - fConst5));
 	fConst16 = (0.5 / fConst9);
-	fConst17 = (1.0 / tan((270.1769682087222 / double(iConst0))));
-	fConst18 = (1 + fConst17);
-	fConst19 = (1.0 / fConst18);
-	fConst20 = (0 - ((1 - fConst17) / fConst18));
-	fConst21 = (1.0 / tan((97.38937226128358 / double(iConst0))));
-	fConst22 = (0 - fConst21);
-	fConst23 = (1 + fConst21);
-	fConst24 = (0.025 / fConst23);
-	fConst25 = (0 - ((1 - fConst21) / fConst23));
-	fConst26 = (1.0 / tan((1281.7698026646356 / double(iConst0))));
-	fConst27 = (1 + fConst26);
-	fConst28 = (1.0 / fConst27);
-	fConst29 = (0 - ((1 - fConst26) / fConst27));
-	fConst30 = (1.0 / tan((5830.795965062656 / double(iConst0))));
-	fConst31 = (0 - fConst30);
-	fConst32 = (1 + fConst30);
-	fConst33 = (1.0 / fConst32);
-	fConst34 = (0 - ((1 - fConst30) / fConst32));
-	fConst35 = (1.0 / tan((314.1592653589793 / double(iConst0))));
-	fConst36 = (1 + fConst35);
-	fConst37 = (1.0 / fConst36);
-	fConst38 = (0 - ((1 - fConst35) / fConst36));
-	fConst39 = (1.0 / tan((376.99111843077515 / double(iConst0))));
-	fConst40 = (1 + fConst39);
-	fConst41 = (1.0 / fConst40);
-	fConst42 = (0 - ((1 - fConst39) / fConst40));
-	fConst43 = (0.5 / fConst12);
-	fConst44 = (0 - fConst39);
+	fConst17 = double(iConst0);
+	fConst18 = (8.67101574539126e-07 * fConst17);
+	fConst19 = (0.00401435914138484 - fConst18);
+	fConst20 = faustpower<2>(fConst17);
+	fConst21 = ((3.68688858465455e-10 * fConst20) - 0.00316091270975185);
+	fConst22 = (3.68688858465455e-10 * fConst17);
+	fConst23 = (0.00486780557301784 + (fConst17 * (fConst22 - 3.03485551088694e-06)));
+	fConst24 = (7.37377716930911e-10 * fConst20);
+	fConst25 = (0.00973561114603569 - fConst24);
+	fConst26 = (1.0 / (0.00486780557301784 + (fConst17 * (3.03485551088694e-06 + fConst22))));
+	fConst27 = (1.0 / tan((270.1769682087222 / double(iConst0))));
+	fConst28 = (1 + fConst27);
+	fConst29 = (1.0 / fConst28);
+	fConst30 = (0 - ((1 - fConst27) / fConst28));
+	fConst31 = (1.0 / tan((97.38937226128358 / double(iConst0))));
+	fConst32 = (0 - fConst31);
+	fConst33 = (1 + fConst31);
+	fConst34 = (0.025 / fConst33);
+	fConst35 = (0 - ((1 - fConst31) / fConst33));
+	fConst36 = (0 - (0.00632182541950369 + fConst24));
+	fConst37 = (0.00401435914138484 + fConst18);
+	fConst38 = (1.0 / tan((314.1592653589793 / double(iConst0))));
+	fConst39 = (1 + fConst38);
+	fConst40 = (1.0 / fConst39);
+	fConst41 = (0 - ((1 - fConst38) / fConst39));
+	fConst42 = (1.0 / tan((376.99111843077515 / double(iConst0))));
+	fConst43 = (1 + fConst42);
+	fConst44 = (1.0 / fConst43);
+	fConst45 = (0 - ((1 - fConst42) / fConst43));
+	fConst46 = (0.5 / fConst12);
+	fConst47 = (0 - fConst42);
 	clear_state_f();
 }
 
@@ -269,81 +275,81 @@ void always_inline Dsp::compute(int count, FAUSTFLOAT *input0, FAUSTFLOAT *outpu
 	double 	fSlow3 = (fConst3 * fSlow0);
 	int 	iSlow4 = int(double(fcheckbox0));
 	double 	fSlow5 = double(fslider1);
-	double 	fSlow6 = (0.0010000000000000009 * pow(10,(0.05 * double(fslider2))));
+	double 	fSlow6 = (0.007000000000000006 * pow(10,(0.05 * double(fslider2))));
 	double 	fSlow7 = double(fcheckbox1);
 	double 	fSlow8 = (fConst7 * fSlow7);
-	double 	fSlow9 = double(fslider3);
-	double 	fSlow10 = (1 - fSlow9);
-	double 	fSlow11 = (0.0010000000000000009 * pow(10,(0.05 * double(fslider4))));
+	double 	fSlow9 = (0.007000000000000006 * double(fslider3));
+	double 	fSlow10 = (0.007000000000000006 * pow(10,(0.05 * double(fslider4))));
 	for (int i=0; i<count; i++) {
 		iVec0[0] = 1;
-		double fTemp0 = (fRec7[1] * (1 - (fConst1 / (fConst1 + (0.06 * exp((0 - (2.4849066497880004 * fRec7[1]))))))));
-		iRec9[0] = ((int((iRec9[1] > 0)))?((2 * (iRec8[1] < iSlow1)) - 1):(1 - (2 * (iRec8[1] > 0))));
-		iRec8[0] = (iRec9[0] + iRec8[1]);
-		fRec12[0] = (fRec12[1] + (fSlow3 * (0 - fRec10[1])));
-		fRec11[0] = ((1 + (fRec11[1] + (fSlow3 * fRec12[0]))) - iVec0[1]);
-		fRec10[0] = fRec11[0];
-		fRec7[0] = (fTemp0 + (fConst1 * (pow((1 + (fSlow5 * ((0.1 * ((iSlow4)?max((double)0, (0.5 * (1 + fRec10[0]))):(fSlow2 * iRec8[0]))) - 0.1))),1.9) / (fConst1 + (0.06 * exp((0 - (2.4849066497880004 * fTemp0))))))));
-		fRec14[0] = ((0.999 * fRec14[1]) + fSlow6);
-		double fTemp1 = (fSlow7 * fRec0[1]);
+		double fTemp0 = (fRec6[1] * (1 - (fConst1 / (fConst1 + (0.06 * exp((0 - (2.4849066497880004 * fRec6[1]))))))));
+		iRec8[0] = ((int((iRec8[1] > 0)))?((2 * (iRec7[1] < iSlow1)) - 1):(1 - (2 * (iRec7[1] > 0))));
+		iRec7[0] = (iRec8[0] + iRec7[1]);
+		fRec11[0] = (fRec11[1] + (fSlow3 * (0 - fRec9[1])));
+		fRec10[0] = ((1 + (fRec10[1] + (fSlow3 * fRec11[0]))) - iVec0[1]);
+		fRec9[0] = fRec10[0];
+		fRec6[0] = (fTemp0 + (fConst1 * (pow((1 + (fSlow5 * ((0.1 * ((iSlow4)?max((double)0, (0.5 * (1 + fRec9[0]))):(fSlow2 * iRec7[0]))) - 0.1))),1.9) / (fConst1 + (0.06 * exp((0 - (2.4849066497880004 * fTemp0))))))));
+		fRec13[0] = ((0.993 * fRec13[1]) + fSlow6);
+		double fTemp1 = (fSlow7 * fRec14[1]);
 		fVec1[0] = fTemp1;
-		fRec21[0] = ((fConst14 * fRec21[1]) + (fConst13 * ((fSlow8 * fRec0[1]) + (fConst11 * fVec1[1]))));
+		fRec21[0] = ((fConst14 * fRec21[1]) + (fConst13 * ((fSlow8 * fRec14[1]) + (fConst11 * fVec1[1]))));
 		fRec20[0] = (fRec21[0] - (fConst10 * ((fConst8 * fRec20[2]) + (fConst6 * fRec20[1]))));
 		fRec23[0] = ((fConst14 * fRec23[1]) + (fConst13 * (fVec1[0] + fVec1[1])));
 		fRec22[0] = (fRec23[0] - (fConst10 * ((fConst8 * fRec22[2]) + (fConst6 * fRec22[1]))));
-		double fTemp2 = ((double)input0[i] + 1e-15);
-		fVec2[0] = fTemp2;
-		fRec28[0] = ((0.9302847925323914 * (fVec2[0] + fVec2[1])) - (0.8605695850647829 * fRec28[1]));
-		fRec27[0] = (fRec28[0] - ((1.8405051250752198 * fRec27[1]) + (0.8612942439318627 * fRec27[2])));
-		double fTemp3 = (1e-15 + (0.027 * fRec26[1]));
-		fVec3[0] = fTemp3;
-		fRec29[0] = ((fConst20 * fRec29[1]) + (fConst19 * (fVec3[0] + fVec3[1])));
-		fRec26[0] = (Ftube(TUBE_TABLE_12AX7_68k, ((fRec29[0] + (0.9254498422517706 * (fRec27[2] + (fRec27[0] + (2.0 * fRec27[1]))))) - 1.581656)) - 191.42014814814814);
-		fRec25[0] = ((fConst25 * fRec25[1]) + (fConst24 * ((fConst21 * fRec26[0]) + (fConst22 * fRec26[1]))));
-		fRec24[0] = ((fConst29 * fRec24[1]) + (fConst28 * (fRec25[0] + fRec25[1])));
-		fRec30[0] = ((fConst34 * fRec30[1]) + (fConst33 * ((fConst30 * fRec25[0]) + (fConst31 * fRec25[1]))));
-		fRec31[0] = ((0.999 * fRec31[1]) + fSlow11);
-		double fTemp4 = ((fRec31[0] * ((fSlow9 * fRec30[0]) + (fSlow10 * fRec24[0]))) - (fConst16 * ((fRec22[2] + (fRec22[0] + (2 * fRec22[1]))) + (1.4125375446227544 * (((fConst5 * fRec20[0]) + (fConst15 * fRec20[1])) + (fConst5 * fRec20[2]))))));
-		fVec4[0] = fTemp4;
+		fRec24[0] = ((0.993 * fRec24[1]) + fSlow9);
+		double fTemp2 = (fConst21 * fRec24[0]);
+		double fTemp3 = ((double)input0[i] + 1e-15);
+		fVec2[0] = fTemp3;
+		fRec29[0] = ((0.9302847925323914 * (fVec2[0] + fVec2[1])) - (0.8605695850647829 * fRec29[1]));
+		fRec28[0] = (fRec29[0] - ((1.8405051250752198 * fRec28[1]) + (0.8612942439318627 * fRec28[2])));
+		double fTemp4 = (1e-15 + (0.027 * fRec27[1]));
+		fVec3[0] = fTemp4;
+		fRec30[0] = ((fConst30 * fRec30[1]) + (fConst29 * (fVec3[0] + fVec3[1])));
+		fRec27[0] = (Ftube(TUBE_TABLE_12AX7_68k, ((fRec30[0] + (0.9254498422517706 * (fRec28[2] + (fRec28[0] + (2.0 * fRec28[1]))))) - 1.581656)) - 191.42014814814814);
+		fRec26[0] = ((fConst35 * fRec26[1]) + (fConst34 * ((fConst31 * fRec27[0]) + (fConst32 * fRec27[1]))));
+		fRec25[0] = (fRec26[0] - (fConst26 * ((fConst25 * fRec25[1]) + (fConst23 * fRec25[2]))));
+		fRec31[0] = ((0.993 * fRec31[1]) + fSlow10);
+		double fTemp5 = ((fConst26 * (fRec31[0] * (((fRec25[0] * (fTemp2 + fConst37)) + (fRec25[1] * (0.00802871828276969 + (fConst36 * fRec24[0])))) + (fRec25[2] * (fTemp2 + fConst19))))) - (fConst16 * ((fRec22[2] + (fRec22[0] + (2 * fRec22[1]))) + (1.4125375446227544 * (((fConst5 * fRec20[0]) + (fConst15 * fRec20[1])) + (fConst5 * fRec20[2]))))));
+		fVec4[0] = fTemp5;
 		fRec19[0] = ((fConst14 * fRec19[1]) + (fConst13 * (fVec4[0] + fVec4[1])));
-		double fTemp5 = (1e-15 + fRec19[0]);
-		fVec5[0] = fTemp5;
+		double fTemp6 = (1e-15 + fRec19[0]);
+		fVec5[0] = fTemp6;
 		fRec18[0] = ((0.9302847925323914 * (fVec5[0] + fVec5[1])) - (0.8605695850647829 * fRec18[1]));
 		fRec17[0] = (fRec18[0] - ((1.8405051250752198 * fRec17[1]) + (0.8612942439318627 * fRec17[2])));
-		double fTemp6 = (1e-15 + (0.015 * fRec16[1]));
-		fVec6[0] = fTemp6;
-		fRec32[0] = ((fConst38 * fRec32[1]) + (fConst37 * (fVec6[0] + fVec6[1])));
+		double fTemp7 = (1e-15 + (0.015 * fRec16[1]));
+		fVec6[0] = fTemp7;
+		fRec32[0] = ((fConst41 * fRec32[1]) + (fConst40 * (fVec6[0] + fVec6[1])));
 		fRec16[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec32[0] + (0.9254498422517706 * (fRec17[2] + (fRec17[0] + (2.0 * fRec17[1]))))) - 1.204285)) - 169.71433333333334);
-		fRec15[0] = ((fConst25 * fRec15[1]) + (fConst24 * ((fConst21 * fRec16[0]) + (fConst22 * fRec16[1]))));
-		double fTemp7 = (fRec15[0] * fRec14[0]);
-		fVec7[0] = fTemp7;
-		fRec13[0] = ((fConst14 * fRec13[1]) + (fConst13 * (fVec7[0] + fVec7[1])));
-		double fTemp8 = (1e-15 + (2700 * (fRec13[0] / (2700 + exp((13.815510557964274 / log((2.718281828459045 + (8.551967507929417 * fRec7[0])))))))));
-		fVec8[0] = fTemp8;
-		fRec6[0] = ((0.9302847925323914 * (fVec8[0] + fVec8[1])) - (0.8605695850647829 * fRec6[1]));
-		fRec5[0] = (fRec6[0] - ((1.8405051250752198 * fRec5[1]) + (0.8612942439318627 * fRec5[2])));
-		double fTemp9 = (1e-15 + (0.0082 * fRec4[1]));
-		fVec9[0] = fTemp9;
-		fRec33[0] = ((fConst42 * fRec33[1]) + (fConst41 * (fVec9[0] + fVec9[1])));
-		fRec4[0] = (Ftube(TUBE_TABLE_6V6_250k, ((fRec33[0] + (0.9254498422517706 * (fRec5[2] + (fRec5[0] + (2.0 * fRec5[1]))))) - 1.130462)) - 112.13878048780487);
-		fRec3[0] = ((fConst25 * fRec3[1]) + (fConst24 * ((fConst21 * fRec4[0]) + (fConst22 * fRec4[1]))));
-		fRec2[0] = ((fConst14 * fRec2[1]) + (fConst43 * (fRec3[0] + fRec3[1])));
-		fRec1[0] = ((fConst42 * fRec1[1]) + (fConst41 * ((fConst39 * fRec2[0]) + (fConst44 * fRec2[1]))));
-		fRec0[0] = fRec1[0];
+		fRec15[0] = ((fConst35 * fRec15[1]) + (fConst34 * ((fConst31 * fRec16[0]) + (fConst32 * fRec16[1]))));
+		fRec14[0] = fRec15[0];
+		double fTemp8 = (fRec14[0] * fRec13[0]);
+		fVec7[0] = fTemp8;
+		fRec12[0] = ((fConst14 * fRec12[1]) + (fConst13 * (fVec7[0] + fVec7[1])));
+		double fTemp9 = (1e-15 + (2700 * (fRec12[0] / (2700 + exp((13.815510557964274 / log((2.718281828459045 + (8.551967507929417 * fRec6[0])))))))));
+		fVec8[0] = fTemp9;
+		fRec5[0] = ((0.9302847925323914 * (fVec8[0] + fVec8[1])) - (0.8605695850647829 * fRec5[1]));
+		fRec4[0] = (fRec5[0] - ((1.8405051250752198 * fRec4[1]) + (0.8612942439318627 * fRec4[2])));
+		double fTemp10 = (1e-15 + (0.0082 * fRec3[1]));
+		fVec9[0] = fTemp10;
+		fRec33[0] = ((fConst45 * fRec33[1]) + (fConst44 * (fVec9[0] + fVec9[1])));
+		fRec3[0] = (Ftube(TUBE_TABLE_6V6_250k, ((fRec33[0] + (0.9254498422517706 * (fRec4[2] + (fRec4[0] + (2.0 * fRec4[1]))))) - 1.130462)) - 112.13878048780487);
+		fRec2[0] = ((fConst35 * fRec2[1]) + (fConst34 * ((fConst31 * fRec3[0]) + (fConst32 * fRec3[1]))));
+		fRec1[0] = ((fConst14 * fRec1[1]) + (fConst46 * (fRec2[0] + fRec2[1])));
+		fRec0[0] = ((fConst45 * fRec0[1]) + (fConst44 * ((fConst42 * fRec1[0]) + (fConst47 * fRec1[1]))));
 		output0[i] = (FAUSTFLOAT)fRec0[0];
 		// post processing
 		fRec0[1] = fRec0[0];
 		fRec1[1] = fRec1[0];
 		fRec2[1] = fRec2[0];
 		fRec3[1] = fRec3[0];
-		fRec4[1] = fRec4[0];
 		fRec33[1] = fRec33[0];
 		fVec9[1] = fVec9[0];
-		fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
-		fRec6[1] = fRec6[0];
+		fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
+		fRec5[1] = fRec5[0];
 		fVec8[1] = fVec8[0];
-		fRec13[1] = fRec13[0];
+		fRec12[1] = fRec12[0];
 		fVec7[1] = fVec7[0];
+		fRec14[1] = fRec14[0];
 		fRec15[1] = fRec15[0];
 		fRec16[1] = fRec16[0];
 		fRec32[1] = fRec32[0];
@@ -354,27 +360,27 @@ void always_inline Dsp::compute(int count, FAUSTFLOAT *input0, FAUSTFLOAT *outpu
 		fRec19[1] = fRec19[0];
 		fVec4[1] = fVec4[0];
 		fRec31[1] = fRec31[0];
-		fRec30[1] = fRec30[0];
-		fRec24[1] = fRec24[0];
-		fRec25[1] = fRec25[0];
+		fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
 		fRec26[1] = fRec26[0];
-		fRec29[1] = fRec29[0];
+		fRec27[1] = fRec27[0];
+		fRec30[1] = fRec30[0];
 		fVec3[1] = fVec3[0];
-		fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
-		fRec28[1] = fRec28[0];
+		fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
+		fRec29[1] = fRec29[0];
 		fVec2[1] = fVec2[0];
+		fRec24[1] = fRec24[0];
 		fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
 		fRec23[1] = fRec23[0];
 		fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
 		fRec21[1] = fRec21[0];
 		fVec1[1] = fVec1[0];
-		fRec14[1] = fRec14[0];
-		fRec7[1] = fRec7[0];
+		fRec13[1] = fRec13[0];
+		fRec6[1] = fRec6[0];
+		fRec9[1] = fRec9[0];
 		fRec10[1] = fRec10[0];
 		fRec11[1] = fRec11[0];
-		fRec12[1] = fRec12[0];
+		iRec7[1] = iRec7[0];
 		iRec8[1] = iRec8[0];
-		iRec9[1] = iRec9[0];
 		iVec0[1] = iVec0[0];
 	}
 #undef fslider0
@@ -385,7 +391,7 @@ void always_inline Dsp::compute(int count, FAUSTFLOAT *input0, FAUSTFLOAT *outpu
 #undef fslider3
 #undef fslider4
 }
-
+		
 void __rt_func Dsp::compute_static(int count, FAUSTFLOAT *input0, FAUSTFLOAT *output0, PluginLV2 *p)
 {
 	static_cast<Dsp*>(p)->compute(count, input0, output0);
@@ -403,6 +409,9 @@ void Dsp::connect(uint32_t port,void* data)
 	case SINEWAVE: 
 		fcheckbox0_ = (float*)data; // , 0.0, 0.0, 1.0, 1.0 
 		break;
+	case TONE: 
+		fslider3_ = (float*)data; // , 0.5, 0.0, 1.0, 0.01 
+		break;
 	case VOLUME: 
 		fslider2_ = (float*)data; // , 0.0, -2e+01, 1e+01, 0.1 
 		break;
@@ -415,9 +424,6 @@ void Dsp::connect(uint32_t port,void* data)
 	case SPEED: 
 		fslider0_ = (float*)data; // , 5.0, 0.1, 1e+01, 0.1 
 		break;
-	case TONE: 
-		fslider3_ = (float*)data; // , 0.5, 0.0, 1.0, 0.01 
-		break;
 	default:
 		break;
 	}
@@ -443,11 +449,11 @@ typedef enum
 {
    GAIN, 
    SINEWAVE, 
+   TONE, 
    VOLUME, 
    FEEDBACK, 
    INTENSITY, 
    SPEED, 
-   TONE, 
 } PortIndex;
 */
 
diff --git a/trunk/src/LV2/faust/gx_vibrochump.dsp b/trunk/src/LV2/faust/gx_vibrochump.dsp
index b28814c..b65b988 100644
--- a/trunk/src/LV2/faust/gx_vibrochump.dsp
+++ b/trunk/src/LV2/faust/gx_vibrochump.dsp
@@ -29,6 +29,30 @@ import("guitarix.lib");
 **	12AX7:EQ:(12AX7:6V6)~FEEDBACK 
 */
 
+bmptone = pre : iir((b0/a0,b1/a0,b2/a0),(a1/a0,a2/a0)) with {
+    LogPot(a, x) = if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
+    Inverted(b, x) = if(b, 1 - x, x);
+    s = 0.993;
+    fs = float(SR);
+    pre = _;
+
+    
+        
+        Tone = vslider("Tone[name:Tone]", 0.5, 0, 1, 0.01) : Inverted(0) : smooth(s);
+            
+    b0 = Tone*(3.68688858465455e-10*pow(fs,2) - 0.00316091270975185) + 8.67101574539126e-7*fs + 0.00401435914138484;
+
+    b1 = Tone*(-7.37377716930911e-10*pow(fs,2) - 0.00632182541950369) + 0.00802871828276969;
+
+    b2 = Tone*(3.68688858465455e-10*pow(fs,2) - 0.00316091270975185) - 8.67101574539126e-7*fs + 0.00401435914138484;
+
+    a0 = fs*(3.68688858465455e-10*fs + 3.03485551088694e-6) + 0.00486780557301784;
+
+    a1 = -7.37377716930911e-10*pow(fs,2) + 0.00973561114603569;
+
+    a2 = fs*(3.68688858465455e-10*fs - 3.03485551088694e-6) + 0.00486780557301784;
+};
+
 /*
 ** Model of a vactrol tremolo unit by "transmogrify"
 ** c.f. http://sourceforge.net/apps/phpbb/guitarix/viewtopic.php?f=7&t=44&p=233&hilit=transmogrifox#p233
@@ -75,18 +99,18 @@ effect =  (tremolo(vslider("speed[style:knob]",5,0.1,10,0.1),vslider("intensity[
 // so if presence is wrapped around odd number of tubestages no need to reverse
 // if even then we need to reverse
 
-process =  stage1:tone:*(preamp):( + : stage2:transformer )~feedback with {
-        preamp =  vslider("Gain[alias][style:knob]",0,-20,20,0.1):db2linear: smoothi(0.999);
+process =  stage1:bmptone:*(preamp): stage2:transformer with {
+        preamp =  vslider("Gain[alias][style:knob]",0,-20,20,0.1):db2linear: smooth(0.993);
 	stage1= tubestage(TB_12AX7_68k,86.0,2700.0,1.581656) ; 
-	tone = component("bigmuff.dsp").bigmuff ;
+	// tone = component("bigmuff.dsp").bigmuff ;
 	// This range 0.1 -> 10
-	volume =  vslider("Volume[alias][style:knob]",0,-20,10,0.1):db2linear:smoothi(0.999);
+	volume =  vslider("Volume[alias][style:knob]",0,-20,10,0.1):db2linear:smooth(0.993);
 	// Ideal attenuation is :
 	// master -20 -> 0 NONE
 	// master 0 - > 20 Either 0.75 or 0.5
 	// How to do in Faust!
 	atten = 0.5; // Seems to need at least this much!
-	stage2 =  lowpass(1,6531.0):tubestage(TB_12AX7_250k,100.0,1500.0,1.204285):*(volume):lowpass(1,6531.0):*(effect):tubestage(TB_6V6_250k,120.0,820.0,1.130462):*(atten); 
+	stage2 =  ( + : lowpass(1,6531.0):tubestage(TB_12AX7_250k,100.0,1500.0,1.204285) )~feedback:*(volume):lowpass(1,6531.0):*(effect):tubestage(TB_6V6_250k,120.0,820.0,1.130462):*(atten); 
        transformer = lowpass( 1, 6531 ):highpass( 1, 120) ;
 	feedback = *(checkbox("feedback") ):high_shelf( 3, 6531 ): *(-0.5);
       cabinet = lowpass(2,5500):peak_eq(-15.0,400.0,400):highpass(2,120);
diff --git a/trunk/src/LV2/gx_redeye.lv2/gx_redeye.ttl b/trunk/src/LV2/gx_redeye.lv2/gx_redeye.ttl
index 0f46154..1da9fe4 100644
--- a/trunk/src/LV2/gx_redeye.lv2/gx_redeye.ttl
+++ b/trunk/src/LV2/gx_redeye.lv2/gx_redeye.ttl
@@ -94,7 +94,7 @@ rdfs:comment """
         lv2:name "Volume";
         lv2:default 0.0 ;
         lv2:minimum -20.0 ;
-        lv2:maximum 20.0 ;
+        lv2:maximum 10.0 ;
     ] , [
         a lv2:InputPort ,
             lv2:ControlPort ;
@@ -168,26 +168,26 @@ rdfs:comment """
         lv2:index 0 ;
         lv2:symbol "Gain" ;
         lv2:name "Gain";
-        lv2:default 5.0 ;
-        lv2:minimum 0.0 ;
-        lv2:maximum 10.0 ;
+        lv2:default 0.0 ;
+        lv2:minimum -20.0 ;
+        lv2:maximum 20.0 ;
     ] , [
         a lv2:InputPort ,
             lv2:ControlPort ;
         lv2:index 1 ;
         lv2:symbol "Tone" ;
         lv2:name "Tone";
-        lv2:default 0.0 ;
-        lv2:minimum -6.0 ;
-        lv2:maximum 6.0 ;
+        lv2:default 0.5 ;
+        lv2:minimum 0.0 ;
+        lv2:maximum 1.0 ;
     ] , [
         a lv2:InputPort ,
             lv2:ControlPort ;
         lv2:index 2 ;
         lv2:symbol "Volume" ;
         lv2:name "Volume";
-        lv2:default 5.0 ;
-        lv2:minimum 0.0 ;
+        lv2:default 0.0 ;
+        lv2:minimum -20.0 ;
         lv2:maximum 10.0 ;
     ] , [
         a lv2:InputPort ,
@@ -262,26 +262,26 @@ rdfs:comment """
         lv2:index 0 ;
         lv2:symbol "Gain" ;
         lv2:name "Gain";
-        lv2:default 5.0 ;
-        lv2:minimum 0.0 ;
-        lv2:maximum 10.0 ;
+        lv2:default 0.0 ;
+        lv2:minimum -20.0 ;
+        lv2:maximum 20.0 ;
     ] , [
         a lv2:InputPort ,
             lv2:ControlPort ;
         lv2:index 1 ;
         lv2:symbol "Tone" ;
         lv2:name "Tone";
-        lv2:default 0.0 ;
-        lv2:minimum -6.0 ;
-        lv2:maximum 6.0 ;
+        lv2:default 0.5 ;
+        lv2:minimum 0.0 ;
+        lv2:maximum 1.0 ;
     ] , [
         a lv2:InputPort ,
             lv2:ControlPort ;
         lv2:index 2 ;
         lv2:symbol "Volume" ;
         lv2:name "Volume";
-        lv2:default 5.0 ;
-        lv2:minimum 0.0 ;
+        lv2:default 0.0 ;
+        lv2:minimum -20.0 ;
         lv2:maximum 10.0 ;
     ] , [
         a lv2:InputPort ,
