diff --git a/plugins/eg-sampler.lv2/sampler.c b/plugins/eg-sampler.lv2/sampler.c
index 1a13a92..744d946 100644
--- a/plugins/eg-sampler.lv2/sampler.c
+++ b/plugins/eg-sampler.lv2/sampler.c
@@ -99,6 +99,19 @@ typedef struct {
 	Sample*  sample;
 } SampleMessage;
 
+static sf_count_t
+convert_to_mono(float *data, sf_count_t num_input_frames, uint32_t channels)
+{
+	sf_count_t mono_index = 0;
+	for (sf_count_t i = 0; i < num_input_frames * channels; i+=channels) {
+		data[mono_index++] = data[i];
+	}
+
+	sf_count_t num_output_frames = mono_index;
+
+	return num_output_frames;
+}
+
 /**
    Load a new sample and return it.
 
@@ -119,9 +132,7 @@ load_sample(LV2_Log_Logger* logger, const char* path)
 	bool           error    = true;
 	if (!sndfile || !info->frames) {
 		lv2_log_error(logger, "Failed to open %s\n", path);
-	} else if (info->channels != 1) {
-		lv2_log_error(logger, "%s has %d channels\n", path, info->channels);
-	} else if (!(data = (float*)malloc(sizeof(float) * info->frames))) {
+	} else if (!(data = (float*)malloc(sizeof(float) * info->frames * info->channels))) {
 		lv2_log_error(logger, "Failed to allocate memory for sample\n");
 	} else {
 		error = false;
@@ -135,9 +146,14 @@ load_sample(LV2_Log_Logger* logger, const char* path)
 	}
 
 	sf_seek(sndfile, 0ul, SEEK_SET);
-	sf_read_float(sndfile, data, info->frames);
+	sf_read_float(sndfile, data, info->frames * info->channels);
 	sf_close(sndfile);
 
+	if (info->channels != 1) {
+		info->frames = convert_to_mono(data, info->frames, info->channels);
+		info->channels = 1;
+	}
+
 	// Fill sample struct and return it
 	sample->data     = data;
 	sample->path     = (char*)malloc(path_len + 1);
