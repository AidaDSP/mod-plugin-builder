diff --git a/plugins/eg-sampler.lv2/sampler.c b/plugins/eg-sampler.lv2/sampler.c
index 17f62a8..425f732 100644
--- a/plugins/eg-sampler.lv2/sampler.c
+++ b/plugins/eg-sampler.lv2/sampler.c
@@ -78,9 +78,11 @@ typedef struct {
 	Sample*    sample;
 	uint32_t   frame_offset;
 	float      gain;
+	float      gain_dB;
 	sf_count_t frame;
 	bool       play;
 	bool       activated;
+	bool       gain_changed;
 	bool       sample_changed;
 } Sampler;
 
@@ -281,7 +283,8 @@ instantiate(const LV2_Descriptor*     descriptor,
 	lv2_atom_forge_init(&self->forge, self->map);
 	peaks_sender_init(&self->psend, self->map);
 
-	self->gain = 1.0;
+	self->gain = 1.0f;
+	self->gain_dB = 0.0f;
 
 	return (LV2_Handle)self;
 }
@@ -359,7 +362,9 @@ handle_event(Sampler* self, LV2_Atom_Event* ev)
 			} else if (key == uris->param_gain) {
 				// Gain change
 				if (value->type == uris->atom_Float) {
-					self->gain = DB_CO(((LV2_Atom_Float*)value)->body);
+					const float gain_dB = ((LV2_Atom_Float*)value)->body;
+					self->gain = DB_CO(gain_dB);
+					self->gain_dB = gain_dB;
 				}
 			}
 		} else if (obj->body.otype == uris->patch_Get && self->sample) {
@@ -432,13 +437,21 @@ run(LV2_Handle instance, uint32_t sample_count)
 	// Start a sequence in the notify output port.
 	lv2_atom_forge_sequence_head(&self->forge, &self->notify_frame, 0);
 
-	// Send update to UI if sample has changed due to state restore
-	if (self->sample_changed) {
+	// Send update to UI if gain parameter or sample have changed due to state restore
+	if (self->gain_changed || self->sample_changed) {
 		lv2_atom_forge_frame_time(&self->forge, 0);
-		write_set_file(&self->forge, &self->uris,
-		               self->sample->path,
-		               self->sample->path_len);
-		self->sample_changed = false;
+
+		if (self->gain_changed) {
+			write_set_gain(&self->forge, &self->uris, self->gain_dB);
+			self->gain_changed = false;
+		}
+
+		if (self->sample_changed) {
+			write_set_file(&self->forge, &self->uris,
+			               self->sample->path,
+			               self->sample->path_len);
+			self->sample_changed = false;
+		}
 	}
 
 	// Iterate over incoming events, emitting audio along the way
@@ -495,6 +508,16 @@ save(LV2_Handle                instance,
 	      LV2_STATE_IS_POD | LV2_STATE_IS_PORTABLE);
 
 	free(apath);
+
+	// Store the gain value
+	const float gain_dB = self->gain_dB;
+	store(handle,
+	      self->uris.param_gain,
+	      &gain_dB,
+	      sizeof(gain_dB),
+	      self->uris.atom_Float,
+	      LV2_STATE_IS_POD | LV2_STATE_IS_PORTABLE);
+
 	return LV2_STATE_SUCCESS;
 }
 
@@ -564,6 +587,21 @@ restore(LV2_Handle                  instance,
 
 	free(path);
 
+	// Get param:gain from state
+	value = retrieve(handle, self->uris.param_gain, &size, &type, &valflags);
+	if (!value) {
+		// This is not fatal, as older versions of eg-sampler were missing this property
+		lv2_log_note(&self->logger, "Missing param:gain\n");
+		return LV2_STATE_SUCCESS;
+	} else if (type != self->uris.atom_Float) {
+		lv2_log_error(&self->logger, "Non-float param:gain\n");
+		return LV2_STATE_ERR_BAD_TYPE;
+	}
+
+	self->gain_dB = *(const float*)value;
+	self->gain = DB_CO(self->gain_dB);
+	self->gain_changed = true;
+
 	return LV2_STATE_SUCCESS;
 }
 
diff --git a/plugins/eg-sampler.lv2/sampler.ttl b/plugins/eg-sampler.lv2/sampler.ttl
index f5088f3..4a3c24c 100644
--- a/plugins/eg-sampler.lv2/sampler.ttl
+++ b/plugins/eg-sampler.lv2/sampler.ttl
@@ -58,7 +58,7 @@
 	] ;
 	state:state [
 		<http://lv2plug.in/plugins/eg-sampler#sample> <click.wav> ;
-		param:gain "1.0"^^xsd:float
+		param:gain "0.0"^^xsd:float
 	] .
 
 <http://lv2plug.in/plugins/eg-sampler#ui>
diff --git a/plugins/eg-sampler.lv2/uris.h b/plugins/eg-sampler.lv2/uris.h
index 57e5754..f0c16ce 100644
--- a/plugins/eg-sampler.lv2/uris.h
+++ b/plugins/eg-sampler.lv2/uris.h
@@ -73,6 +73,34 @@ map_sampler_uris(LV2_URID_Map* map, SamplerURIs* uris)
 	uris->patch_value        = map->map(map->handle, LV2_PATCH__value);
 }
 
+/**
+   Write a message like the following to `forge`:
+   [source,turtle]
+   ----
+   []
+   a patch:Set ;
+   patch:property param:gain ;
+   patch:value 0.0f .
+   ----
+*/
+static inline LV2_Atom_Forge_Ref
+write_set_gain(LV2_Atom_Forge*    forge,
+               const SamplerURIs* uris,
+               const float        gain)
+{
+	LV2_Atom_Forge_Frame frame;
+	LV2_Atom_Forge_Ref   set = lv2_atom_forge_object(
+		forge, &frame, 0, uris->patch_Set);
+
+	lv2_atom_forge_key(forge, uris->patch_property);
+	lv2_atom_forge_urid(forge, uris->param_gain);
+	lv2_atom_forge_key(forge, uris->patch_value);
+	lv2_atom_forge_float(forge, gain);
+
+	lv2_atom_forge_pop(forge, &frame);
+	return set;
+}
+
 /**
    Write a message like the following to `forge`:
    [source,turtle]
