diff --git a/plugins/LinuxVST/src/BassDrive/BassDriveProc.cpp b/plugins/LinuxVST/src/BassDrive/BassDriveProc.cpp
index 3e199ea..ace9d63 100755
--- a/plugins/LinuxVST/src/BassDrive/BassDriveProc.cpp
+++ b/plugins/LinuxVST/src/BassDrive/BassDriveProc.cpp
@@ -7,6 +7,11 @@
 #include "BassDrive.h"
 #endif
 
+#include <cmath>
+using std::abs;
+using std::pow;
+using std::sin;
+
 void BassDrive::processReplacing(float **inputs, float **outputs, VstInt32 sampleFrames) 
 {
     float* in1  =  inputs[0];
@@ -14,21 +19,19 @@ void BassDrive::processReplacing(float **inputs, float **outputs, VstInt32 sampl
     float* out1 = outputs[0];
     float* out2 = outputs[1];
 
-	double sumL;
-	double sumR;
-	double presence = pow(A,5) * 8.0;
-	double high = pow(B,3) * 4.0;
-	double mid = pow(C,2);
-	double low = D / 4.0;
-	double drive = E * 2.0;
-	double bridgerectifier;
+	float sumL;
+	float sumR;
+	float presence = pow(A,5) * 8.0;
+	float high = pow(B,3) * 4.0;
+	float mid = pow(C,2);
+	float low = D / 4.0;
+	float drive = E * 2.0;
+	float bridgerectifier;
 	
     while (--sampleFrames >= 0)
     {
-		long double inputSampleL = *in1;
-		long double inputSampleR = *in2;
-		if (fabs(inputSampleL)<1.18e-37) inputSampleL = fpd * 1.18e-37;
-		if (fabs(inputSampleR)<1.18e-37) inputSampleR = fpd * 1.18e-37;
+		float inputSampleL = *in1;
+		float inputSampleR = *in2;
 		
 		sumL = 0.0;
 		sumR = 0.0;
@@ -311,16 +314,7 @@ void BassDrive::processReplacing(float **inputs, float **outputs, VstInt32 sampl
 		//output R
 		
 		flip = !flip;
-		
-		//begin 32 bit stereo floating point dither
-		int expon; frexpf((float)inputSampleL, &expon);
-		fpd ^= fpd << 13; fpd ^= fpd >> 17; fpd ^= fpd << 5;
-		inputSampleL += ((double(fpd)-uint32_t(0x7fffffff)) * 5.5e-36l * pow(2,expon+62));
-		frexpf((float)inputSampleR, &expon);
-		fpd ^= fpd << 13; fpd ^= fpd >> 17; fpd ^= fpd << 5;
-		inputSampleR += ((double(fpd)-uint32_t(0x7fffffff)) * 5.5e-36l * pow(2,expon+62));
-		//end 32 bit stereo floating point dither
-		
+
 		*out1 = inputSampleL;
 		*out2 = inputSampleR;
 
